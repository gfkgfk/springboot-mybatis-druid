abc.def="prod hello"
ghi="prod word"
test.message1 = "prod test message 1"
test.message2 = "prod test message 2"

#核心Logger（包含嵌入式容器、hibernate、spring）会输出更多内容，但是自己应用的日志并不会输出为DEBUG级别。
debug=true

#日志输出
#logging.file.name和logging.file.path不能同时生效，在配置了两者的情况下，以logging.file.name为准。
#写入本地日志文件的文件名
#logging.file.name=my.log
#写入本地日志文件的路径
logging.file.path=var/log


#日志级别控制
#logging.level：日志级别控制前缀，*为包名或Logger名
#LEVEL：选项TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF
#举例：
#logging.level.com.mrbird=DEBUG：com.mrbird包下所有class以DEBUG级别输出。
#logging.level.root=WARN：root日志以WARN级别输出。
logging.level.com.test.springboot.controller=DEBUG

#自定义日志配置
#根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载：
#Logback：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy
#Log4j：log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml
#Log4j2：log4j2-spring.xml, log4j2.xml
#JDK (Java Util Logging)：logging.properties
#Spring Boot官方推荐优先使用带有-spring的文件名作为你的日志配置（如使用logback-spring.xml，而不是logback.xml），命名为logback-spring.xml的日志配置文件，spring boot可以为它添加一些spring boot特有的配置项。
#上面是默认的命名规则，并且放在src/main/resources下面即可。
#如果既想完全掌控日志配置，但又不想用logback.xml作为Logback配置的名字，可以在application.properties配置文件里面通过logging.config属性指定自定义的名字：
logging.config=classpath:logging-config.xml


#----MyBatis配置
#mapper位置
mybatis.mapper-locations=classpath:mappers/*.xml
#显示SQL的log
logging.level.com.test.springboot.mapper=debug



#----Druid配置
#多数据源 first
# 数据库地址
spring.datasource.druid.first.name=mybatis
spring.datasource.druid.first.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.druid.first.url=jdbc:mysql://110.40.220.207:3306/mybatis?useUnicode=true&characterEncoding=utf-8&useSSL=false
# 数据库用户名
spring.datasource.druid.first.username=mybatis
# 数据库密码
spring.datasource.druid.first.password=123456

#多数据源 second
# 数据库地址
spring.datasource.druid.second.name=springbootdb
spring.datasource.druid.second.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.druid.second.url=jdbc:mysql://110.40.220.207:3306/springbootdb?useUnicode=true&characterEncoding=utf-8&useSSL=false
# 数据库用户名
spring.datasource.druid.second.username=springbootdb
# 数据库密码
spring.datasource.druid.second.password=123456

#----Druid其他配置
# 数据库连接池最大值
spring.datasource.druid.max-active=20
# 数据库连接池初始值
spring.datasource.druid.initial-size=5
# 数据库连接池最小空闲值
spring.datasource.druid.min-idle=5
# 池中空闲连接大于minIdle且连接空闲时间大于该值，则关闭该连接，单位毫秒(5分钟，默认30分钟)
spring.datasource.druid.min-evictable-idle-time-millis=300000
# 获取连接时最大等待时间，单位毫秒(1分钟)
spring.datasource.druid.max-wait=60000
# 检测连接是否有效时执行的sql命令
spring.datasource.druid.validation-query=select 1
# 借用连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
spring.datasource.druid.test-on-borrow=false
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
spring.datasource.druid.test-on-return=false
# 连接空闲时检测，如果连接空闲时间大于timeBetweenEvictionRunsMillis指定的毫秒，执行validationQuery指定的SQL来检测连接是否有效
spring.datasource.druid.test-while-idle=true
# 空闲连接检查、废弃连接清理、空闲连接池大小调整的操作时间间隔，单位是毫秒(1分钟)
spring.datasource.druid.time-between-eviction-runs-millis=60000
#--------配置监控
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.druid.filters=stat,wall
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.druid.connection-properties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
#WebStatFilter配置
#是否启用StatFilter默认值false，用于采集 web-jdbc 关联监控的数据。
spring.datasource.druid.web-stat-filter.enabled=true
#需要监控的 url
spring.datasource.druid.web-stat-filter.url-pattern=/*
#排除一些静态资源，以提高效率
spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*
#StatViewServlet配置
#是否启用StatViewServlet（监控页面）默认值为false（考虑到安全问题默认并未启动，如需启用建议设置密码或白名单以保障安全）
spring.datasource.druid.stat-view-servlet.enabled=true
#内置的监控页面地址，例如 /druid/*，则内置监控页面的首页是 /druid/index.html
spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*
#是否允许清空统计数据
spring.datasource.druid.stat-view-servlet.reset-enable=false
# 需要账号密码才能访问控制台
spring.datasource.druid.stat-view-servlet.login-username=admin
spring.datasource.druid.stat-view-servlet.login-password=admin
# IP白名单
# allow: 127.0.0.1
#　IP黑名单（共同存在时，deny优先于allow）
# deny: 192.168.1.218
# 配置StatFilter
spring.datasource.druid.filter.stat.log-slow-sql=true



# Redis配置
# Redis数据库索引（默认为0）
spring.redis.database:0
# Redis服务器地址
spring.redis.host: 110.40.220.207
# Redis服务器连接端口
spring.redis.port: 6379
#Redis密码,没有密码可以不用配置这个
spring.redis.password=123456
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active: 8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait: -1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle: 8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle: 0
# 连接超时时间（毫秒）
spring.redis.timeout: 5000

#swagger2
# Springfox 假设 Spring MVC 的路径匹配策略是 ant-path-matcher，而 Spring Boot 2.6.x及以后版本的默认匹配策略是 path-pattern-matcher，不修改会造成documentationPluginsBootstrapper报错。
spring.mvc.pathmatch.matching-strategy: ant_path_matcher



#Actuator
#关掉安全认证
#management.security.enabled:false
#如果配置端口，则不与应用端口重复，不配置则默认与应用端口一致
#management.server.port:9001
#暴露所有端点 默认是info,health
management.endpoints.web.exposure.include=*
#修改访问路径  2.0之前默认是/   2.0默认是 /actuator  可以通过这个属性值修改
management.endpoints.web.base-path=/monitor
#是否启用 health 端点
management.endpoint.health.enabled=true
#显示健康具体信息  默认不会显示详细信息
management.endpoint.health.show-details=always
#shutdown端点可以用来远程关闭应用，此端点默认是关闭的，如果使用的话，需要开启
#请使用 POST请求
management.endpoint.shutdown.enabled = true
#启用http trace端点
management.trace.http.enabled = true


#java mail sender
#spring.mail.host: smtp.163.com
#spring.mail.username: 111
#spring.mail.password: 111
#spring.mail.properties.mail.smtp.auth: true
#spring.mail.properties.mail.smtp.starttls.enable: true
#spring.mail.properties.mail.smtp.starttls.required: true

#spring boot admin client端配置，server端参考SBA项目
spring.boot.admin.client.url=http://localhost:9002
